
------------------------------------------------------------
Catch all errors outlines in the instructions. 
------------------------------------------------------------
Available syscalls :
 . access()
 . chdir() 
------------------------------------------------------------
Built-in command :
 . one that I've implemented
 . exit , cd , path
 . everything else -> access(); 
------------------------------------------------------------
To check if a file exists in a directory and is executable, consider using the access() system call.
------------------------------------------------------------
SHELL SEARCH PATH : 
 . Need a path variable with all the paths to all the executables.
 . to be called "path"
 . when the user types in the command , the shell should search for the corresponding executable
 . initial path=/bin
------------------------------------------------------------
 . use execv()
 . do not use system() 
------------------------------------------------------------
"Your basic shell should be able to parse a command and execute it.

    For example, if the user types ls -la /tmp, your shell should run the program /bin/ls with the given arguments -la and /tmp (how does the shell know to run /bin/ls? Itâ€™s the shell path; more on that later).
"
------------------------------------------------------------
 . Practice creating, destroying, and managing processes.

============================================================
========================== PARENT ==========================
============================================================

cmd = 0

while(1) 
    prompt "> "
    get line  
    parse line 
    extract cmd
    
    if(cmd=="exit") break

    fork/wait/exec(cmd) 

============================================================
========================== CHILD ===========================
============================================================
 -> shell response	  
    -> execute the command 
    -> child finishes
 -> parent resumes , prompts again 

============================================================
============================================================
============================================================

wish>		// as in "wish >_"
_
